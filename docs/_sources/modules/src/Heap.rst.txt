.. default-domain:: chpl

.. module:: Heap
   :synopsis: This module contains the implementation of the heap type.

Heap
====
**Usage**

.. code-block:: chapel

   use Heap;


This module contains the implementation of the heap type.

A heap is a specialized tree-based data structure
that supports extracting the maximal or the minimal element quickly,
which can serve as a priority queue.

* Both `push` and `pop` operations are O(lgN).
* Querying the top element is O(1).
* Initialization from an array is O(N).

.. record:: heap

   .. attribute:: type eltType

      The type of the elements contained in this heap. 

   .. attribute:: type comparator = DefaultComparator

      
      Comparator record that defines how the
      data is compared. The greatest element will be on the top.
      

   .. attribute:: param parSafe = false

      If `true`, this heap will perform parallel safe operations. 

   .. method:: proc init(type eltType, type comparator = DefaultComparator, param parSafe = false)

      
      Initializes an empty heap.
      
      :arg eltType: The type of the elements
      
      :arg comparator: `DefaultComparator` makes max-heap and `ReverseCompartor` makes a min-heap
      
      :arg parSafe: If `true`, this heap will use parallel safe operations.
      :type parSafe: `param bool`
      

   .. method:: proc init=(other: this.type .eltTypelist?p)

      
      Initializes a heap containing elements that are copy initialized from
      the elements contained in another list.
      
      :arg other: The list to initialize from.
      

   .. method:: proc init=(other: [?d] this.type .eltType)

      
      Initializes a heap containing elements that are copy initialized from
      the elements contained in an array.
      
      :arg other: The array to initialize from.
      

   .. method:: proc init=(other: range(this.type .eltType, ?b, ?d))

      
      Initializes a heap containing elements that are copy initialized from
      the elements yielded by a range.
      
      .. note::
      
        Attempting to initialize a heap from an unbounded range will trigger
        a compiler error.
      
      :arg other: The range to initialize from.
      :type other: `range(this.type.eltType)`
      

   .. method:: proc size: int

      
      Return the size of the heap.
      
      :return: The size of the heap
      :rtype: int
      

   .. method:: proc isEmpty(): bool

      
      Returns `true` if this heap contains zero elements.
      
      :return: `true` if this heap is empty.
      :rtype: `bool`
      

   .. method:: proc top(): eltType

      
      Return the maximal element in the heap.
      
      :return: The maximal element in the heap
      :rtype: `eltType`
      
      .. note::
        *Maximal* is defined by ``comparator``. If a ``reverseComparator`` is passed to ``init``,
        the heap will return the minimal element.
      
      

   .. method:: proc push(element: eltType)

      
      Push an element into the heap
      
      :arg element: The element that will be pushed
      :type element: `eltType`
      

   .. method:: proc pop()

      
      Pop an element.
      
        .. note::
          This procedure does not return the element.
      
      

.. function:: proc makeHeap(x: list(?t), type comparator = DefaultComparator)

   
   Make a heap from a list.
   
   :arg x: The list to initialize the heap from.
   :type x: `list(?t)`
   
   :arg comparator: The comparator type
   
   :rtype: heap(t, comparator)
   

.. function:: proc makeHeap(x: range, type comparator = DefaultComparator)

   
   Make a heap from a range
   
   :arg x: The range to initialize the heap from.
   :type x: `range`
   
   :arg comparator: The comparator type
   
   :rtype: heap(int, comparator)
   
     .. note::
   
       Attempting to initialize a heap from an unbounded range will trigger
       a compiler error.
   
   

.. function:: proc makeHeap(x: [?d] ?t, type comparator = DefaultComparator)

   
   Make a heap from a array.
   
   :arg x: The array to initialize the heap from.
   :type x: `[?d] ?t`
   
   :arg comparator: The comparator type
   
   :rtype: heap(t, comparator)
   

.. function:: proc pushHeap(x: list(?t), ref h: heap(t))

   
   Push elements of a list into a heap.
   
   :arg x: The list of which elements is to push.
   :type x: `list(?t)`
   
   :arg h: The heap to push
   :type h: `heap(t)`
   

.. function:: proc pushHeap(x: range, ref h: heap(int))

   
   Push elements in a range into a heap.
   
   :arg x: The range of which elements is to push.
   :type x: `range`
   
   :arg h: The heap to push
   :type h: `heap(int)`
   

.. function:: proc pushHeap(x: [?d] ?t, ref h: heap(t))

   
   Push elements in an array into a heap.
   
   :arg x: The array of which elements is to push.
   :type x: `[?d]?t`
   
   :arg h: The heap to push
   :type h: `heap(t)`
   

